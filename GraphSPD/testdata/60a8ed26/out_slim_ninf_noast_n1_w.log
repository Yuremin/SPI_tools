(-109, -110, 'CDG', 1)
(-90, -109, 'DDGNULL', 1)
(-90, -109, 'CDG', 1)
(-35, -116, 'CDG', -1)
(-90, -108, 'CDG', 1)
(-116, -118, 'DDGlen', -1)
(-114, -119, 'DDGp[len]', -1)
(-117, -121, 'CDG', -1)
(-90, -95, 'CDG', 1)
(-31, -102, 'DDGcert', 1)
(-114, -118, 'DDGp[len]', -1)
(-24, -90, 'DDGNULL', 1)
(-110, -111, 'DDGp', 1)
(-117, -119, 'CDG', -1)
(-109, -113, 'CDG', 1)
(-118, -119, 'DDGp', -1)
(-5, -110, 'DDGs', 1)
(-106, -110, 'DDGp[len]', 1)
(-44, -114, 'DDGp', -1)
(-44, -75, 'DDGp', -1)
(-90, -104, 'CDG', 1)
(-44, -90, 'DDGp', 1)
(-35, -114, 'CDG', -1)
(-44, -118, 'DDGp', -1)
(-106, -111, 'DDGp[len]', 1)
(-90, -102, 'CDG', 1)
(-31, -120, 'DDGcert', -1)
(-90, -106, 'DDGp', 1)
(-117, -120, 'CDG', -1)
(-35, -117, 'CDG', -1)
(-108, -110, 'DDGlen', 1)
(-109, -111, 'CDG', 1)
(-90, -106, 'CDG', 1)
(-5, -118, 'DDGs', -1)
(-90, -110, 'DDGp', 1)
(-109, -112, 'CDG', 1)
(-35, -115, 'CDG', -1)
(-31, -112, 'DDGcert', 1)
(-44, -90, 'DDGNULL', 1)
(-35, -90, 'CDG', 1)
(-90, -107, 'CDG', 1)
(-117, -118, 'CDG', -1)
(-90, -75, 'DDGp', 1)
(-35, -90, 'DDGNULL', 1)
(-157, -248, 'DDGsname', -1)
(-197, -226, 'DDGsubject', 1)
(-177, -183, 'DDGsubject', 1)
(-248, -257, 'DDGNULL', -1)
(-153, -266, 'DDGdepth', -1)
(-149, -226, 'DDGerr', 1)
(-157, -177, 'DDGsname', 1)
(-177, -223, 'DDGNULL', 1)
(-197, -167, 'DDGsubject', 1)
(-183, -226, 'DDGsubject', 1)
(-161, -203, 'DDGiname', 1)
(-257, -266, 'DDGissuer', -1)
(-183, -188, 'CDG', 1)
(-203, -209, 'DDGissuer', 1)
(-183, -167, 'DDGsubject', 1)
(-209, -214, 'CDG', 1)
(-223, -169, 'DDGissuer', 1)
(-209, -169, 'DDGissuer', 1)
(-248, -266, 'DDGsubject', -1)
(-183, -203, 'DDGNULL', 1)
(-177, -183, 'DDGNULL', 1)
(-266, -167, 'DDGsubject', -1)
(-141, -188, 'DDGc', 1)
(-188, -214, 'DDGNGX_LOG_ALERT', 1)
(-203, -209, 'DDGNULL', 1)
(-149, -266, 'DDGerr', -1)
(-161, -257, 'DDGiname', -1)
(-266, -169, 'DDGissuer', -1)
(-177, -209, 'DDGNULL', 1)
(-141, -214, 'DDGc', 1)
(-153, -226, 'DDGdepth', 1)
(-141, -226, 'DDGc', 1)
(-177, -203, 'DDGNULL', 1)
(-141, -266, 'DDGc', -1)
(-183, -223, 'DDGNULL', 1)
(-223, -226, 'DDGissuer', 1)
(-209, -226, 'DDGissuer', 1)
(-183, -209, 'DDGNULL', 1)
(-398, -399, 'CDG', -1)
(-371, -387, 'DDGp', 1)
(-398, -401, 'CDG', -1)
(-399, -400, 'DDGp', -1)
(-325, -395, 'DDGp', -1)
(-371, -387, 'CDG', 1)
(-387, -391, 'DDGp[len]', 1)
(-371, -385, 'CDG', 1)
(-325, -371, 'DDGp', 1)
(-398, -402, 'CDG', -1)
(-390, -393, 'CDG', 1)
(-312, -401, 'DDGcert', -1)
(-371, -391, 'DDGp', 1)
(-316, -397, 'CDG', -1)
(-387, -392, 'DDGp[len]', 1)
(-325, -399, 'DDGp', -1)
(-325, -356, 'DDGp', -1)
(-286, -399, 'DDGs', -1)
(-389, -391, 'DDGlen', 1)
(-325, -371, 'DDGNULL', 1)
(-371, -376, 'CDG', 1)
(-371, -388, 'CDG', 1)
(-312, -383, 'DDGcert', 1)
(-312, -393, 'DDGcert', 1)
(-395, -399, 'DDGp[len]', -1)
(-390, -394, 'CDG', 1)
(-391, -392, 'DDGp', 1)
(-390, -392, 'CDG', 1)
(-316, -395, 'CDG', -1)
(-390, -391, 'CDG', 1)
(-371, -356, 'DDGp', 1)
(-316, -371, 'DDGNULL', 1)
(-316, -371, 'CDG', 1)
(-286, -391, 'DDGs', 1)
(-397, -399, 'DDGlen', -1)
(-316, -398, 'CDG', -1)
(-316, -396, 'CDG', -1)
(-371, -389, 'CDG', 1)
(-371, -390, 'CDG', 1)
(-371, -390, 'DDGNULL', 1)
(-305, -371, 'DDGNULL', 1)
(-395, -400, 'DDGp[len]', -1)
(-371, -383, 'CDG', 1)
(-398, -400, 'CDG', -1)
===========================
(-90, 1, '-', 0, '+4925', 'if (p == NULL)')
(-116, -1, '-', 0, '-4934', 's->data = ngx_pnalloc(pool, len)')
(-106, 1, '-', 0, '+4931', 'for (len = 0; p[len]; len++)')
(-121, -1, '-', 0, '-4946', 'return NGX_OK;')
(-102, 1, '-', 0, '+4927', 'X509_free(cert)')
(-112, 1, '-', 0, '+4944', 'X509_free(cert)')
(-35, 0, 'C', 6, '4919', 'if (name == NULL)')
(-5, 0, 'D', 37, '4904', 'ngx_str_t *s')
(-75, 0, 'D', 11, '4936', 'OPENSSL_free(p)')
(-113, 1, '-', 0, '+4946', 'return NGX_OK;')
(-104, 1, '-', 0, '+4928', 'return NGX_ERROR;')
(-119, -1, '-', 0, '-4943', 'OPENSSL_free(p)')
(-24, 0, 'D', 11, '4914', 'if (cert == NULL)')
(-114, -1, '-', 0, '-4931', 'for (len = 0; p[len]; len++)')
(-95, 1, '-', 0, '+4926', 'ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, "X509_NAME_oneline() failed")')
(-44, 0, 'D', 1, '4924', 'p = X509_NAME_oneline(name, NULL, 0)')
(-115, -1, '-', 0, '-4933', 's->len = len')
(-111, 1, '-', 0, '+4943', 'OPENSSL_free(p)')
(-107, 1, '-', 0, '+4933', 's->len = len')
(-109, 1, '-', 0, '+4935', 'if (s->data == NULL)')
(-118, -1, '-', 0, '-4941', 'ngx_memcpy(s->data, p, len)')
(-117, -1, '-', 0, '-4935', 'if (s->data == NULL)')
(-110, 1, '-', 0, '+4941', 'ngx_memcpy(s->data, p, len)')
(-108, 1, '-', 0, '+4934', 's->data = ngx_pnalloc(pool, len)')
(-31, 0, 'D', 9, '4918', 'name = X509_get_subject_name(cert)')
(-120, -1, '-', 0, '-4944', 'X509_free(cert)')
(-200, 1, '-', 0, '+1036', 'if (iname)')
(-157, 0, 'D', 1, '1021', 'sname = X509_get_subject_name(cert)')
(-174, 1, '-', 0, '+1023', 'if (sname)')
(-214, 1, '-', 0, '+1039', 'ngx_ssl_error(NGX_LOG_ALERT, c->log, 0,\\n                          "X509_NAME_oneline() failed")')
(-242, 1, '-', 0, '+1054', 'if (subject)')
(-279, -1, '-', 0, '-1058', 'if (iname)')
(-257, -1, '-', 0, '-1035', 'issuer = iname ? X509_NAME_oneline(iname, NULL, 0) : "(none)"')
(-223, 1, '-', 0, '+1044', 'issuer = NULL')
(-221, 1, '-', 0, '+1043', 'else')
(-276, -1, '-', 0, '-1054', 'if (sname)')
(-197, 1, '-', 0, '+1031', 'subject = NULL')
(-167, 0, 'D', 8, '1055', 'OPENSSL_free(subject)')
(-209, 1, '-', 0, '+1038', 'if (issuer == NULL)')
(-153, 0, 'D', 28, '1019', 'depth = X509_STORE_CTX_get_error_depth(x509_store)')
(-161, 0, 'D', 1, '1034', 'iname = X509_get_issuer_name(cert)')
(-141, 0, 'D', 11, '1015', 'c = ngx_ssl_get_connection(ssl_conn)')
(-183, 1, '-', 0, '+1025', 'if (subject == NULL)')
(-266, -1, '-', 0, '-1047', 'ngx_log_debug5(NGX_LOG_DEBUG_EVENT, c->log, 0,\\n                   "verify:%d, error:%d, depth:%d, "\\n                   "subject:\\"%s\\", issuer:\\"%s\\"",\\n                   ok, err, depth, subject, issuer)')
(-188, 1, '-', 0, '+1026', 'ngx_ssl_error(NGX_LOG_ALERT, c->log, 0,\\n                          "X509_NAME_oneline() failed")')
(-245, 1, '-', 0, '+1058', 'if (issuer)')
(-169, 0, 'D', 12, '1059', 'OPENSSL_free(issuer)')
(-149, 0, 'D', 29, '1018', 'err = X509_STORE_CTX_get_error(x509_store)')
(-195, 1, '-', 0, '+1030', 'else')
(-177, 1, '-', 0, '+1024', 'subject = X509_NAME_oneline(sname, NULL, 0)')
(-203, 1, '-', 0, '+1037', 'issuer = X509_NAME_oneline(iname, NULL, 0)')
(-248, -1, '-', 0, '-1022', 'subject = sname ? X509_NAME_oneline(sname, NULL, 0) : "(none)"')
(-226, 1, '-', 0, '+1047', 'ngx_log_debug5(NGX_LOG_DEBUG_EVENT, c->log, 0,\\n                   "verify:%d, error:%d, depth:%d, "\\n                   "subject:\\"%s\\", issuer:\\"%s\\"",\\n                   ok, err, depth,\\n                   subject ? subject : "(none)",\\n                   issuer ? issuer : "(none)")')
(-376, 1, '-', 0, '+4974', 'ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, "X509_NAME_oneline() failed")')
(-388, 1, '-', 0, '+4981', 's->len = len')
(-305, 0, 'D', 11, '4962', 'if (cert == NULL)')
(-385, 1, '-', 0, '+4976', 'return NGX_ERROR;')
(-400, -1, '-', 0, '-4991', 'OPENSSL_free(p)')
(-325, 0, 'D', 1, '4972', 'p = X509_NAME_oneline(name, NULL, 0)')
(-399, -1, '-', 0, '-4989', 'ngx_memcpy(s->data, p, len)')
(-396, -1, '-', 0, '-4981', 's->len = len')
(-398, -1, '-', 0, '-4983', 'if (s->data == NULL)')
(-389, 1, '-', 0, '+4982', 's->data = ngx_pnalloc(pool, len)')
(-401, -1, '-', 0, '-4992', 'X509_free(cert)')
(-390, 1, '-', 0, '+4983', 'if (s->data == NULL)')
(-402, -1, '-', 0, '-4994', 'return NGX_OK;')
(-316, 0, 'C', 6, '4967', 'if (name == NULL)')
(-387, 1, '-', 0, '+4979', 'for (len = 0; p[len]; len++)')
(-395, -1, '-', 0, '-4979', 'for (len = 0; p[len]; len++)')
(-392, 1, '-', 0, '+4991', 'OPENSSL_free(p)')
(-312, 0, 'D', 9, '4966', 'name = X509_get_issuer_name(cert)')
(-397, -1, '-', 0, '-4982', 's->data = ngx_pnalloc(pool, len)')
(-356, 0, 'D', 11, '4984', 'OPENSSL_free(p)')
(-383, 1, '-', 0, '+4975', 'X509_free(cert)')
(-371, 1, '-', 0, '+4973', 'if (p == NULL)')
(-391, 1, '-', 0, '+4989', 'ngx_memcpy(s->data, p, len)')
(-393, 1, '-', 0, '+4992', 'X509_free(cert)')
(-286, 0, 'D', 37, '4952', 'ngx_str_t *s')
(-394, 1, '-', 0, '+4994', 'return NGX_OK;')
---------------------------
(-35, -116, 'CDG', -1)
(-116, -118, 'DDGlen', -1)
(-114, -119, 'DDGp[len]', -1)
(-117, -121, 'CDG', -1)
(-114, -118, 'DDGp[len]', -1)
(-117, -119, 'CDG', -1)
(-118, -119, 'DDGp', -1)
(-44, -114, 'DDGp', -1)
(-44, -75, 'DDGp', -1)
(-35, -114, 'CDG', -1)
(-44, -118, 'DDGp', -1)
(-31, -120, 'DDGcert', -1)
(-117, -120, 'CDG', -1)
(-35, -117, 'CDG', -1)
(-5, -118, 'DDGs', -1)
(-35, -115, 'CDG', -1)
(-117, -118, 'CDG', -1)
(-157, -248, 'DDGsname', -1)
(-248, -257, 'DDGNULL', -1)
(-153, -266, 'DDGdepth', -1)
(-257, -266, 'DDGissuer', -1)
(-248, -266, 'DDGsubject', -1)
(-266, -167, 'DDGsubject', -1)
(-149, -266, 'DDGerr', -1)
(-161, -257, 'DDGiname', -1)
(-266, -169, 'DDGissuer', -1)
(-141, -266, 'DDGc', -1)
(-398, -399, 'CDG', -1)
(-398, -401, 'CDG', -1)
(-399, -400, 'DDGp', -1)
(-325, -395, 'DDGp', -1)
(-398, -402, 'CDG', -1)
(-312, -401, 'DDGcert', -1)
(-316, -397, 'CDG', -1)
(-325, -399, 'DDGp', -1)
(-325, -356, 'DDGp', -1)
(-286, -399, 'DDGs', -1)
(-395, -399, 'DDGp[len]', -1)
(-316, -395, 'CDG', -1)
(-397, -399, 'DDGlen', -1)
(-316, -398, 'CDG', -1)
(-316, -396, 'CDG', -1)
(-395, -400, 'DDGp[len]', -1)
(-398, -400, 'CDG', -1)
===========================
(-116, -1, '-', 0, '-4934', 's->data = ngx_pnalloc(pool, len)')
(-121, -1, '-', 0, '-4946', 'return NGX_OK;')
(-35, 0, 'C', 6, '4919', 'if (name == NULL)')
(-5, 0, 'D', 37, '4904', 'ngx_str_t *s')
(-75, 0, 'D', 11, '4936', 'OPENSSL_free(p)')
(-119, -1, '-', 0, '-4943', 'OPENSSL_free(p)')
(-24, 0, 'D', 11, '4914', 'if (cert == NULL)')
(-114, -1, '-', 0, '-4931', 'for (len = 0; p[len]; len++)')
(-44, 0, 'D', 1, '4924', 'p = X509_NAME_oneline(name, NULL, 0)')
(-115, -1, '-', 0, '-4933', 's->len = len')
(-118, -1, '-', 0, '-4941', 'ngx_memcpy(s->data, p, len)')
(-117, -1, '-', 0, '-4935', 'if (s->data == NULL)')
(-31, 0, 'D', 9, '4918', 'name = X509_get_subject_name(cert)')
(-120, -1, '-', 0, '-4944', 'X509_free(cert)')
(-157, 0, 'D', 1, '1021', 'sname = X509_get_subject_name(cert)')
(-279, -1, '-', 0, '-1058', 'if (iname)')
(-257, -1, '-', 0, '-1035', 'issuer = iname ? X509_NAME_oneline(iname, NULL, 0) : "(none)"')
(-276, -1, '-', 0, '-1054', 'if (sname)')
(-167, 0, 'D', 8, '1055', 'OPENSSL_free(subject)')
(-153, 0, 'D', 28, '1019', 'depth = X509_STORE_CTX_get_error_depth(x509_store)')
(-161, 0, 'D', 1, '1034', 'iname = X509_get_issuer_name(cert)')
(-141, 0, 'D', 11, '1015', 'c = ngx_ssl_get_connection(ssl_conn)')
(-266, -1, '-', 0, '-1047', 'ngx_log_debug5(NGX_LOG_DEBUG_EVENT, c->log, 0,\\n                   "verify:%d, error:%d, depth:%d, "\\n                   "subject:\\"%s\\", issuer:\\"%s\\"",\\n                   ok, err, depth, subject, issuer)')
(-169, 0, 'D', 12, '1059', 'OPENSSL_free(issuer)')
(-149, 0, 'D', 29, '1018', 'err = X509_STORE_CTX_get_error(x509_store)')
(-248, -1, '-', 0, '-1022', 'subject = sname ? X509_NAME_oneline(sname, NULL, 0) : "(none)"')
(-305, 0, 'D', 11, '4962', 'if (cert == NULL)')
(-400, -1, '-', 0, '-4991', 'OPENSSL_free(p)')
(-325, 0, 'D', 1, '4972', 'p = X509_NAME_oneline(name, NULL, 0)')
(-399, -1, '-', 0, '-4989', 'ngx_memcpy(s->data, p, len)')
(-396, -1, '-', 0, '-4981', 's->len = len')
(-398, -1, '-', 0, '-4983', 'if (s->data == NULL)')
(-401, -1, '-', 0, '-4992', 'X509_free(cert)')
(-402, -1, '-', 0, '-4994', 'return NGX_OK;')
(-316, 0, 'C', 6, '4967', 'if (name == NULL)')
(-395, -1, '-', 0, '-4979', 'for (len = 0; p[len]; len++)')
(-312, 0, 'D', 9, '4966', 'name = X509_get_issuer_name(cert)')
(-397, -1, '-', 0, '-4982', 's->data = ngx_pnalloc(pool, len)')
(-356, 0, 'D', 11, '4984', 'OPENSSL_free(p)')
(-286, 0, 'D', 37, '4952', 'ngx_str_t *s')
---------------------------
(-109, -110, 'CDG', 1)
(-90, -109, 'DDGNULL', 1)
(-90, -109, 'CDG', 1)
(-90, -108, 'CDG', 1)
(-90, -95, 'CDG', 1)
(-31, -102, 'DDGcert', 1)
(-24, -90, 'DDGNULL', 1)
(-110, -111, 'DDGp', 1)
(-109, -113, 'CDG', 1)
(-5, -110, 'DDGs', 1)
(-106, -110, 'DDGp[len]', 1)
(-90, -104, 'CDG', 1)
(-44, -90, 'DDGp', 1)
(-106, -111, 'DDGp[len]', 1)
(-90, -102, 'CDG', 1)
(-90, -106, 'DDGp', 1)
(-108, -110, 'DDGlen', 1)
(-109, -111, 'CDG', 1)
(-90, -106, 'CDG', 1)
(-90, -110, 'DDGp', 1)
(-109, -112, 'CDG', 1)
(-31, -112, 'DDGcert', 1)
(-44, -90, 'DDGNULL', 1)
(-35, -90, 'CDG', 1)
(-90, -107, 'CDG', 1)
(-90, -75, 'DDGp', 1)
(-35, -90, 'DDGNULL', 1)
(-197, -226, 'DDGsubject', 1)
(-177, -183, 'DDGsubject', 1)
(-149, -226, 'DDGerr', 1)
(-157, -177, 'DDGsname', 1)
(-177, -223, 'DDGNULL', 1)
(-197, -167, 'DDGsubject', 1)
(-183, -226, 'DDGsubject', 1)
(-161, -203, 'DDGiname', 1)
(-183, -188, 'CDG', 1)
(-203, -209, 'DDGissuer', 1)
(-183, -167, 'DDGsubject', 1)
(-209, -214, 'CDG', 1)
(-223, -169, 'DDGissuer', 1)
(-209, -169, 'DDGissuer', 1)
(-183, -203, 'DDGNULL', 1)
(-177, -183, 'DDGNULL', 1)
(-141, -188, 'DDGc', 1)
(-188, -214, 'DDGNGX_LOG_ALERT', 1)
(-203, -209, 'DDGNULL', 1)
(-177, -209, 'DDGNULL', 1)
(-141, -214, 'DDGc', 1)
(-153, -226, 'DDGdepth', 1)
(-141, -226, 'DDGc', 1)
(-177, -203, 'DDGNULL', 1)
(-183, -223, 'DDGNULL', 1)
(-223, -226, 'DDGissuer', 1)
(-209, -226, 'DDGissuer', 1)
(-183, -209, 'DDGNULL', 1)
(-371, -387, 'DDGp', 1)
(-371, -387, 'CDG', 1)
(-387, -391, 'DDGp[len]', 1)
(-371, -385, 'CDG', 1)
(-325, -371, 'DDGp', 1)
(-390, -393, 'CDG', 1)
(-371, -391, 'DDGp', 1)
(-387, -392, 'DDGp[len]', 1)
(-389, -391, 'DDGlen', 1)
(-325, -371, 'DDGNULL', 1)
(-371, -376, 'CDG', 1)
(-371, -388, 'CDG', 1)
(-312, -383, 'DDGcert', 1)
(-312, -393, 'DDGcert', 1)
(-390, -394, 'CDG', 1)
(-391, -392, 'DDGp', 1)
(-390, -392, 'CDG', 1)
(-390, -391, 'CDG', 1)
(-371, -356, 'DDGp', 1)
(-316, -371, 'DDGNULL', 1)
(-316, -371, 'CDG', 1)
(-286, -391, 'DDGs', 1)
(-371, -389, 'CDG', 1)
(-371, -390, 'CDG', 1)
(-371, -390, 'DDGNULL', 1)
(-305, -371, 'DDGNULL', 1)
(-371, -383, 'CDG', 1)
===========================
(-90, 1, '-', 0, '+4925', 'if (p == NULL)')
(-106, 1, '-', 0, '+4931', 'for (len = 0; p[len]; len++)')
(-102, 1, '-', 0, '+4927', 'X509_free(cert)')
(-112, 1, '-', 0, '+4944', 'X509_free(cert)')
(-35, 0, 'C', 6, '4919', 'if (name == NULL)')
(-5, 0, 'D', 37, '4904', 'ngx_str_t *s')
(-75, 0, 'D', 11, '4936', 'OPENSSL_free(p)')
(-113, 1, '-', 0, '+4946', 'return NGX_OK;')
(-104, 1, '-', 0, '+4928', 'return NGX_ERROR;')
(-24, 0, 'D', 11, '4914', 'if (cert == NULL)')
(-95, 1, '-', 0, '+4926', 'ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, "X509_NAME_oneline() failed")')
(-44, 0, 'D', 1, '4924', 'p = X509_NAME_oneline(name, NULL, 0)')
(-111, 1, '-', 0, '+4943', 'OPENSSL_free(p)')
(-107, 1, '-', 0, '+4933', 's->len = len')
(-109, 1, '-', 0, '+4935', 'if (s->data == NULL)')
(-110, 1, '-', 0, '+4941', 'ngx_memcpy(s->data, p, len)')
(-108, 1, '-', 0, '+4934', 's->data = ngx_pnalloc(pool, len)')
(-31, 0, 'D', 9, '4918', 'name = X509_get_subject_name(cert)')
(-200, 1, '-', 0, '+1036', 'if (iname)')
(-157, 0, 'D', 1, '1021', 'sname = X509_get_subject_name(cert)')
(-174, 1, '-', 0, '+1023', 'if (sname)')
(-214, 1, '-', 0, '+1039', 'ngx_ssl_error(NGX_LOG_ALERT, c->log, 0,\\n                          "X509_NAME_oneline() failed")')
(-242, 1, '-', 0, '+1054', 'if (subject)')
(-223, 1, '-', 0, '+1044', 'issuer = NULL')
(-221, 1, '-', 0, '+1043', 'else')
(-197, 1, '-', 0, '+1031', 'subject = NULL')
(-167, 0, 'D', 8, '1055', 'OPENSSL_free(subject)')
(-209, 1, '-', 0, '+1038', 'if (issuer == NULL)')
(-153, 0, 'D', 28, '1019', 'depth = X509_STORE_CTX_get_error_depth(x509_store)')
(-161, 0, 'D', 1, '1034', 'iname = X509_get_issuer_name(cert)')
(-141, 0, 'D', 11, '1015', 'c = ngx_ssl_get_connection(ssl_conn)')
(-183, 1, '-', 0, '+1025', 'if (subject == NULL)')
(-188, 1, '-', 0, '+1026', 'ngx_ssl_error(NGX_LOG_ALERT, c->log, 0,\\n                          "X509_NAME_oneline() failed")')
(-245, 1, '-', 0, '+1058', 'if (issuer)')
(-169, 0, 'D', 12, '1059', 'OPENSSL_free(issuer)')
(-149, 0, 'D', 29, '1018', 'err = X509_STORE_CTX_get_error(x509_store)')
(-195, 1, '-', 0, '+1030', 'else')
(-177, 1, '-', 0, '+1024', 'subject = X509_NAME_oneline(sname, NULL, 0)')
(-203, 1, '-', 0, '+1037', 'issuer = X509_NAME_oneline(iname, NULL, 0)')
(-226, 1, '-', 0, '+1047', 'ngx_log_debug5(NGX_LOG_DEBUG_EVENT, c->log, 0,\\n                   "verify:%d, error:%d, depth:%d, "\\n                   "subject:\\"%s\\", issuer:\\"%s\\"",\\n                   ok, err, depth,\\n                   subject ? subject : "(none)",\\n                   issuer ? issuer : "(none)")')
(-376, 1, '-', 0, '+4974', 'ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, "X509_NAME_oneline() failed")')
(-388, 1, '-', 0, '+4981', 's->len = len')
(-305, 0, 'D', 11, '4962', 'if (cert == NULL)')
(-385, 1, '-', 0, '+4976', 'return NGX_ERROR;')
(-325, 0, 'D', 1, '4972', 'p = X509_NAME_oneline(name, NULL, 0)')
(-389, 1, '-', 0, '+4982', 's->data = ngx_pnalloc(pool, len)')
(-390, 1, '-', 0, '+4983', 'if (s->data == NULL)')
(-316, 0, 'C', 6, '4967', 'if (name == NULL)')
(-387, 1, '-', 0, '+4979', 'for (len = 0; p[len]; len++)')
(-392, 1, '-', 0, '+4991', 'OPENSSL_free(p)')
(-312, 0, 'D', 9, '4966', 'name = X509_get_issuer_name(cert)')
(-356, 0, 'D', 11, '4984', 'OPENSSL_free(p)')
(-383, 1, '-', 0, '+4975', 'X509_free(cert)')
(-371, 1, '-', 0, '+4973', 'if (p == NULL)')
(-391, 1, '-', 0, '+4989', 'ngx_memcpy(s->data, p, len)')
(-393, 1, '-', 0, '+4992', 'X509_free(cert)')
(-286, 0, 'D', 37, '4952', 'ngx_str_t *s')
(-394, 1, '-', 0, '+4994', 'return NGX_OK;')
