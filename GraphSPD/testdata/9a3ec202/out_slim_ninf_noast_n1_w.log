(-9, -140, 'CDG', -1)
(-109, -110, 'DDGn', 1)
(-111, -124, 'DDGc', 1)
(-111, -124, 'CDG', 1)
(-111, -136, 'CDG', 1)
(-111, -131, 'CDG', 1)
(-9, -106, 'CDG', 1)
(-106, -136, 'DDGc', 1)
(-9, -109, 'CDG', 1)
(-89, -124, 'DDGNGX_LOG_DEBUG_CORE', 1)
(-106, -124, 'DDGc', 1)
(-3, -111, 'DDGcycle', 1)
(-106, -111, 'DDGc', 1)
(-140, -141, 'DDGn', -1)
(-83, -131, 'DDGc', 1)
(-9, -111, 'CDG', 1)
(-83, -124, 'DDGc', 1)
(-83, -136, 'DDGc', 1)
(-106, -131, 'DDGc', 1)
(-83, -111, 'DDGc', 1)
(-111, -131, 'DDGc', 1)
(-111, -136, 'DDGc', 1)
===========================
(-106, 1, '-', 0, '+1313', 'c = NULL')
(-124, 1, '-', 0, '+1339', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection again")')
(-141, -1, '-', 0, '-1316', 'for (i = 0; i < n; i++)')
(-3, 0, 'D', 39, '1292', 'ngx_cycle_t *cycle')
(-131, 1, '-', 0, '+1342', 'c->close = 1')
(-9, 0, 'C', 15, '1298', 'if (cycle->free_connection_n > cycle->connection_n / 16\\n        || cycle->reusable_connections_n == 0)')
(-140, -1, '-', 0, '-1314', 'n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1)')
(-110, 1, '-', 0, '+1316', 'for (i = 0; i < n; i++)')
(-109, 1, '-', 0, '+1314', 'n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1)')
(-111, 1, '-', 0, '+1331', 'if (cycle->free_connection_n == 0 && c && c->reusable)')
(-89, 0, 'D', 15, '1324', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection")')
(-83, 0, 'D', 9, '1322', 'c = ngx_queue_data(q, ngx_connection_t, queue)')
(-136, 1, '-', 0, '+1343', 'c->read->handler(c->read)')
---------------------------
(-9, -140, 'CDG', -1)
(-140, -141, 'DDGn', -1)
===========================
(-141, -1, '-', 0, '-1316', 'for (i = 0; i < n; i++)')
(-3, 0, 'D', 39, '1292', 'ngx_cycle_t *cycle')
(-9, 0, 'C', 15, '1298', 'if (cycle->free_connection_n > cycle->connection_n / 16\\n        || cycle->reusable_connections_n == 0)')
(-140, -1, '-', 0, '-1314', 'n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1)')
(-89, 0, 'D', 15, '1324', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection")')
(-83, 0, 'D', 9, '1322', 'c = ngx_queue_data(q, ngx_connection_t, queue)')
---------------------------
(-109, -110, 'DDGn', 1)
(-111, -124, 'DDGc', 1)
(-111, -124, 'CDG', 1)
(-111, -136, 'CDG', 1)
(-111, -131, 'CDG', 1)
(-9, -106, 'CDG', 1)
(-106, -136, 'DDGc', 1)
(-9, -109, 'CDG', 1)
(-89, -124, 'DDGNGX_LOG_DEBUG_CORE', 1)
(-106, -124, 'DDGc', 1)
(-3, -111, 'DDGcycle', 1)
(-106, -111, 'DDGc', 1)
(-83, -131, 'DDGc', 1)
(-9, -111, 'CDG', 1)
(-83, -124, 'DDGc', 1)
(-83, -136, 'DDGc', 1)
(-106, -131, 'DDGc', 1)
(-83, -111, 'DDGc', 1)
(-111, -131, 'DDGc', 1)
(-111, -136, 'DDGc', 1)
===========================
(-106, 1, '-', 0, '+1313', 'c = NULL')
(-124, 1, '-', 0, '+1339', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection again")')
(-3, 0, 'D', 39, '1292', 'ngx_cycle_t *cycle')
(-131, 1, '-', 0, '+1342', 'c->close = 1')
(-9, 0, 'C', 15, '1298', 'if (cycle->free_connection_n > cycle->connection_n / 16\\n        || cycle->reusable_connections_n == 0)')
(-110, 1, '-', 0, '+1316', 'for (i = 0; i < n; i++)')
(-109, 1, '-', 0, '+1314', 'n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1)')
(-111, 1, '-', 0, '+1331', 'if (cycle->free_connection_n == 0 && c && c->reusable)')
(-89, 0, 'D', 15, '1324', 'ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,\\n                       "reusing connection")')
(-83, 0, 'D', 9, '1322', 'c = ngx_queue_data(q, ngx_connection_t, queue)')
(-136, 1, '-', 0, '+1343', 'c->read->handler(c->read)')
