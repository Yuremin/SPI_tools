(-237, -386, 'DDGngx_processes[i].proc', -1)
(-15, -381, 'DDGch.command', -1)
(-184, -381, 'DDGch.slot', -1)
(-386, -397, 'DDGch.fd', -1)
(-237, -363, 'CDG', 1)
(-217, -372, 'DDGngx_processes[i].respawn', -1)
(-237, -397, 'DDGcycle', -1)
(-141, -367, 'DDGch.slot', -1)
(-132, -381, 'DDGch.pid', -1)
(-381, -141, 'DDGch.slot', -1)
(-237, -363, 'DDGcycle', 1)
(-237, -367, 'CDG', -1)
(-386, -132, 'DDGch.fd', -1)
(-334, -372, 'DDGngx_processes[i].pid', -1)
(-397, -367, 'DDG&ch', -1)
(-156, -386, 'DDGngx_processes[n].pid', -1)
(-39, -372, 'DDGngx_processes[i].respawn', -1)
(-103, -386, 'DDGngx_processes[i].channel', -1)
(-217, -386, 'DDGngx_processes[i].respawn', -1)
(-184, -386, 'DDGch.slot', -1)
(-156, -386, 'DDGngx_processes[n].exited', -1)
(-372, -367, 'DDGch.pid', -1)
(-20, -372, 'DDGch.fd', -1)
(-202, -372, 'DDGngx_processes[n].channel[0]', -1)
(-381, -132, 'DDGch.slot', -1)
(-95, -386, 'DDGngx_processes[i].detached', -1)
(-156, -372, 'DDGngx_processes[n].channel[0]', -1)
(-202, -367, 'DDG&ch', -1)
(-10, -381, 'DDG&ch', -1)
(-343, -386, 'DDGngx_processes[i].detached', -1)
(-15, -367, 'DDGch.command', -1)
(-397, -386, 'DDG&ch', -1)
(-202, -372, 'DDG&ch', -1)
(-112, -386, 'DDGngx_processes[i].channel[0]', -1)
(-365, -360, 'DDGlive', 1)
(-372, -397, 'DDGch.pid', -1)
(-39, -386, 'DDGngx_processes[i].exited', -1)
(-10, -367, 'DDG&ch', -1)
(-386, -141, 'DDGch.fd', -1)
(-77, -386, 'DDGngx_processes[i].pid', -1)
(-184, -386, 'DDGngx_processes[n].pid', -1)
(-202, -397, 'DDG&ch', -1)
(-367, -141, 'DDGch.command', -1)
(-122, -372, 'DDGngx_processes[i].channel[1]', -1)
(-237, -401, 'CDG', -1)
(-237, -386, 'DDGngx_processes[i].data', -1)
(-39, -386, 'DDGngx_processes[i].pid', -1)
(-334, -386, 'DDGngx_processes[i].pid', -1)
(-39, -386, 'DDGngx_processes[i].just_spawn', -1)
(-15, -397, 'DDGch.command', -1)
(-156, -372, 'DDGngx_processes[n].exited', -1)
(-20, -381, 'DDGch.fd', -1)
(-372, -386, 'DDGch.pid', -1)
(-363, -39, 'DDGcycle', 1)
(-237, -372, 'DDGngx_processes[i].name', -1)
(-88, -372, 'DDGngx_processes[i].exited', -1)
(-10, -397, 'DDG&ch', -1)
(-386, -381, 'DDGch.fd', -1)
(-381, -372, 'DDGch.slot', -1)
(-274, -372, 'DDGngx_processes[i].pid', -1)
(-15, -386, 'DDGch.command', -1)
(-202, -381, 'DDG&ch', -1)
(-39, -386, 'DDGngx_processes[i].detached', -1)
(-132, -372, 'DDGch.pid', -1)
(-39, -372, 'DDGngx_processes[i].exited', -1)
(-141, -397, 'DDGch.slot', -1)
(-343, -386, 'DDGngx_processes[i].exiting', -1)
(-132, -386, 'DDGch.pid', -1)
(-397, -372, 'DDG&ch', -1)
(-397, -184, 'DDG&ch', -1)
(-184, -386, 'DDGch.pid', -1)
(-237, -372, 'CDG', -1)
(-367, -381, 'DDGch.command', -1)
(-397, -202, 'DDG&ch', -1)
(-381, -397, 'DDGch.slot', -1)
(-367, -386, 'DDGch.command', -1)
(-39, -372, 'DDGngx_processes[i].just_spawn', -1)
(-259, -372, 'DDGngx_processes[i].name', -1)
(-397, -141, 'DDG&ch', -1)
(-103, -372, 'DDGngx_processes[i].channel', -1)
(-237, -386, 'DDGngx_processes[i].name', -1)
(-217, -386, 'DDGngx_processes[i].exiting', -1)
(-259, -386, 'DDGngx_processes[i].name', -1)
(-397, -381, 'DDG&ch', -1)
(-386, -372, 'DDGch.fd', -1)
(-184, -372, 'DDGch.slot', -1)
(-397, -39, 'DDGcycle', -1)
(-397, -132, 'DDG&ch', -1)
(-343, -372, 'DDGngx_processes[i].exiting', -1)
(-184, -372, 'DDGch.pid', -1)
(-237, -372, 'DDGngx_processes[i].data', -1)
(-381, -367, 'DDGch.slot', -1)
(-381, -184, 'DDGch.slot', -1)
(-10, -372, 'DDG&ch', -1)
(-39, -386, 'DDGngx_processes[i].exiting', -1)
(-397, -237, 'DDGcycle', -1)
(-237, -386, 'CDG', -1)
(-343, -372, 'DDGngx_processes[i].detached', -1)
(-39, -386, 'DDGngx_processes[i].respawn', -1)
(-367, -372, 'DDGch.command', -1)
(-141, -372, 'DDGch.slot', -1)
(-372, -381, 'DDGch.pid', -1)
(-122, -386, 'DDGngx_processes[i].channel[1]', -1)
(-372, -132, 'DDGch.pid', -1)
(-217, -372, 'DDGngx_processes[i].exiting', -1)
(-156, -386, 'DDGngx_processes[n].channel[0]', -1)
(-184, -372, 'DDGngx_processes[n].pid', -1)
(-401, -360, 'DDGlive', -1)
(-237, -397, 'CDG', -1)
(-39, -372, 'DDGngx_processes[i].pid', -1)
(-237, -365, 'CDG', 1)
(-202, -386, 'DDG&ch', -1)
(-88, -386, 'DDGngx_processes[i].exited', -1)
(-156, -372, 'DDGngx_processes[n].pid', -1)
(-184, -381, 'DDGch.pid', -1)
(-20, -367, 'DDGch.fd', -1)
(-237, -372, 'DDGngx_processes[i].proc', -1)
(-381, -386, 'DDGch.slot', -1)
(-39, -372, 'DDGngx_processes[i].exiting', -1)
(-112, -372, 'DDGngx_processes[i].channel[0]', -1)
(-367, -132, 'DDGch.command', -1)
(-10, -386, 'DDG&ch', -1)
(-77, -372, 'DDGngx_processes[i].pid', -1)
(-15, -372, 'DDGch.command', -1)
(-132, -367, 'DDGch.pid', -1)
(-39, -372, 'DDGngx_processes[i].detached', -1)
(-274, -386, 'DDGngx_processes[i].pid', -1)
(-141, -381, 'DDGch.slot', -1)
(-184, -397, 'DDGch.pid', -1)
(-20, -397, 'DDGch.fd', -1)
(-386, -367, 'DDGch.fd', -1)
(-141, -386, 'DDGch.slot', -1)
(-184, -397, 'DDGch.slot', -1)
(-367, -184, 'DDGch.command', -1)
(-367, -202, 'DDGch.command', -1)
(-386, -184, 'DDGch.fd', -1)
(-184, -367, 'DDGch.slot', -1)
(-132, -397, 'DDGch.pid', -1)
(-386, -202, 'DDGch.fd', -1)
(-184, -367, 'DDGch.pid', -1)
(-95, -372, 'DDGngx_processes[i].detached', -1)
(-20, -386, 'DDGch.fd', -1)
(-381, -202, 'DDGch.slot', -1)
(-367, -397, 'DDGch.command', -1)
(-202, -386, 'DDGngx_processes[n].channel[0]', -1)
(-363, -237, 'DDGcycle', 1)
(-237, -381, 'CDG', -1)
(-462, -453, 'DDGch.slot', -1)
(-453, -478, 'DDGch.pid', -1)
(-425, -438, 'DDGcycle', 1)
(-467, -478, 'DDGch.fd', -1)
(-462, -478, 'DDGch.slot', -1)
(-447, -462, 'DDGch.command', -1)
(-438, -425, 'DDGcycle', 1)
(-437, -438, 'CDG', 1)
(-442, -453, 'DDG&ch', -1)
(-452, -462, 'CDG', -1)
(-462, -467, 'DDGch.slot', -1)
(-447, -478, 'DDGch.command', -1)
(-478, -462, 'DDG&ch', -1)
(-447, -453, 'DDGch.command', -1)
(-442, -478, 'DDG&ch', -1)
(-478, -425, 'DDGcycle', -1)
(-442, -467, 'DDG&ch', -1)
(-467, -462, 'DDGch.fd', -1)
(-452, -453, 'CDG', -1)
(-478, -453, 'DDG&ch', -1)
(-452, -478, 'CDG', -1)
(-447, -467, 'DDGch.command', -1)
(-425, -478, 'DDGcycle', -1)
(-442, -447, 'DDG&ch', -1)
(-467, -453, 'DDGch.fd', -1)
(-453, -462, 'DDGch.pid', -1)
(-442, -462, 'DDG&ch', -1)
(-452, -467, 'CDG', -1)
(-453, -467, 'DDGch.pid', -1)
(-478, -467, 'DDG&ch', -1)
(-567, -494, 'DDGngx_processes[i].channel[0]', 1)
(-587, -567, 'DDGngx_processes[i].channel[0]', 1)
(-567, -587, 'DDGch.pid', 1)
(-494, -587, 'DDGngx_processes[i].pid', 1)
(-603, -525, 'DDGngx_processes[i].pid', -1)
(-541, -587, 'DDGch.pid', 1)
(-536, -541, 'DDGch.command', 1)
(-494, -603, 'DDGngx_processes[i].channel[0]', -1)
(-555, -587, 'DDGch.fd', 1)
(-494, -567, 'CDG', 1)
(-567, -587, 'DDGngx_processes[i].pid', 1)
(-600, -603, 'DDGch', -1)
(-567, -587, 'DDGch.fd', 1)
(-567, -525, 'DDGngx_processes[i].pid', 1)
(-536, -567, 'DDGch.command', 1)
(-536, -555, 'DDGch.command', 1)
(-541, -550, 'DDGch.pid', 1)
(-494, -567, 'DDGngx_processes[i].pid', 1)
(-603, -623, 'DDGngx_processes[i].pid', -1)
(-603, -494, 'DDGngx_processes[i].channel[0]', -1)
(-567, -522, 'DDGngx_processes[i].channel[0]', 1)
(-541, -555, 'DDGch.pid', 1)
(-494, -603, 'CDG', -1)
(-603, -522, 'DDGngx_processes[i].channel[0]', -1)
(-587, -525, 'DDGngx_processes[i].channel[0]', 1)
(-567, -494, 'DDGngx_processes[i].pid', 1)
(-623, -494, 'DDGngx_processes[i].channel[0]', -1)
(-494, -623, 'DDGngx_processes[i].channel[0]', -1)
(-494, -603, 'DDGngx_processes[i].pid', -1)
(-587, -522, 'DDGngx_processes[i].channel[0]', 1)
(-623, -522, 'DDGngx_processes[i].channel[0]', -1)
(-550, -555, 'DDGch.slot', 1)
(-567, -587, 'DDGngx_processes[i].channel[0]', 1)
(-587, -567, 'DDG&ch', 1)
(-555, -567, 'DDGch.fd', 1)
(-550, -567, 'DDGch.slot', 1)
(-536, -587, 'DDGch.command', 1)
(-494, -623, 'CDG', -1)
(-603, -525, 'DDGngx_processes[i].channel[0]', -1)
(-587, -494, 'DDGngx_processes[i].channel[0]', 1)
(-483, -567, 'DDGcycle', 1)
(-603, -494, 'DDGngx_processes[i].pid', -1)
(-494, -587, 'DDGngx_processes[i].channel[0]', 1)
(-541, -567, 'DDGch.pid', 1)
(-494, -567, 'DDGngx_processes[i].channel[0]', 1)
(-567, -525, 'DDGngx_processes[i].channel[0]', 1)
(-603, -522, 'DDGngx_processes[i].pid', -1)
(-623, -525, 'DDGngx_processes[i].channel[0]', -1)
(-567, -522, 'DDGngx_processes[i].pid', 1)
(-536, -550, 'DDGch.command', 1)
(-494, -623, 'DDGngx_processes[i].pid', -1)
(-623, -603, 'DDGngx_processes[i].channel[0]', -1)
(-494, -525, 'DDGngx_processes[i].pid', -1)
(-603, -623, 'DDGngx_processes[i].channel[0]', -1)
(-567, -587, 'DDGch.slot', 1)
(-494, -587, 'CDG', 1)
(-623, -603, 'DDGch', -1)
(-600, -623, 'DDGch', -1)
(-734, -794, 'DDG&ch', -1)
(-775, -794, 'DDGch.command', -1)
(-637, -720, 'DDGrespawn', 1)
(-753, -805, 'DDGch.slot', -1)
(-758, -780, 'DDGch.fd', -1)
(-729, -773, 'DDGloader', -1)
(-780, -805, 'DDGch.pid', -1)
(-774, -805, 'DDGcycle', -1)
(-739, -775, 'DDGch.command', -1)
(-732, -744, 'CDG', -1)
(-775, -780, 'DDGch.command', -1)
(-773, -774, 'CDG', -1)
(-723, -725, 'CDG', 1)
(-715, -719, 'DDGmanager', 1)
(-773, -789, 'CDG', -1)
(-734, -780, 'DDG&ch', -1)
(-734, -744, 'DDG&ch', -1)
(-758, -805, 'DDGch.fd', -1)
(-730, -676, 'DDGpath', -1)
(-721, -724, 'DDGcycle', 1)
(-769, -774, 'DDGcycle', -1)
(-637, -733, 'DDGrespawn', -1)
(-739, -794, 'DDGch.command', -1)
(-753, -794, 'DDGch.slot', -1)
(-734, -769, 'DDG&ch', -1)
(-739, -744, 'DDGch.command', -1)
(-720, -724, 'DDGngx_cache_manager_process_cycle', 1)
(-739, -753, 'DDGch.command', -1)
(-733, -769, 'DDGcycle', -1)
(-769, -775, 'DDG&ch', -1)
(-732, -769, 'CDG', -1)
(-733, -774, 'DDGngx_cache_manager_process_cycle', -1)
(-794, -805, 'DDGch.fd', -1)
(-734, -789, 'DDG&ch', -1)
(-789, -805, 'DDGch.slot', -1)
(-719, -721, 'CDG', 1)
(-758, -775, 'DDGch.fd', -1)
(-734, -758, 'DDG&ch', -1)
(-769, -789, 'DDG&ch', -1)
(-732, -739, 'CDG', -1)
(-769, -805, 'DDG&ch', -1)
(-773, -805, 'CDG', -1)
(-744, -805, 'DDGch.pid', -1)
(-732, -758, 'CDG', -1)
(-758, -769, 'DDGch.fd', -1)
(-780, -789, 'DDGch.pid', -1)
(-753, -769, 'DDGch.slot', -1)
(-775, -805, 'DDGch.command', -1)
(-734, -775, 'DDG&ch', -1)
(-780, -794, 'DDGch.pid', -1)
(-753, -780, 'DDGch.slot', -1)
(-744, -794, 'DDGch.pid', -1)
(-720, -721, 'DDGcycle', 1)
(-744, -758, 'DDGch.pid', -1)
(-753, -789, 'DDGch.slot', -1)
(-723, -724, 'CDG', 1)
(-775, -789, 'DDGch.command', -1)
(-734, -753, 'DDG&ch', -1)
(-773, -775, 'CDG', -1)
(-739, -780, 'DDGch.command', -1)
(-734, -805, 'DDG&ch', -1)
(-744, -775, 'DDGch.pid', -1)
(-773, -780, 'CDG', -1)
(-744, -780, 'DDGch.pid', -1)
(-724, -725, 'DDGcycle', 1)
(-716, -723, 'DDGloader', 1)
(-732, -733, 'CDG', -1)
(-732, -734, 'CDG', -1)
(-769, -794, 'DDG&ch', -1)
(-739, -769, 'DDGch.command', -1)
(-753, -758, 'DDGch.slot', -1)
(-719, -720, 'CDG', 1)
(-773, -794, 'CDG', -1)
(-744, -769, 'DDGch.pid', -1)
(-789, -794, 'DDGch.slot', -1)
(-734, -739, 'DDG&ch', -1)
(-732, -753, 'CDG', -1)
(-739, -789, 'DDGch.command', -1)
(-739, -805, 'DDGch.command', -1)
(-717, -666, 'DDGpath', 1)
(-753, -775, 'DDGch.slot', -1)
(-744, -789, 'DDGch.pid', -1)
(-758, -789, 'DDGch.fd', -1)
(-730, -666, 'DDGpath', -1)
(-728, -732, 'DDGmanager', -1)
(-758, -794, 'DDGch.fd', -1)
(-744, -753, 'DDGch.pid', -1)
(-739, -758, 'DDGch.command', -1)
(-769, -780, 'DDG&ch', -1)
===========================
(-141, 0, 'D', 38, '592', 'ch.slot = i')
(-343, 0, 'D', 38, '671', 'if (ngx_processes[i].exiting || !ngx_processes[i].detached)')
(-365, 1, '-', 0, '+637', 'live = 1')
(-10, 0, 'D', 69, '561', 'ngx_memzero(&ch, sizeof(ngx_channel_t))')
(-363, 1, '-', 0, '+630', 'ngx_pass_open_channel(cycle)')
(-184, 0, 'D', 28, '602', 'ngx_log_debug3(NGX_LOG_DEBUG_CORE, cycle->log, 0,\\n                                   "pass close channel s:%i pid:%P to:%P",\\n                                   ch.slot, ch.pid, ngx_processes[n].pid)')
(-77, 0, 'D', 52, '579', 'if (ngx_processes[i].pid == -1)')
(-366, 1, '-', 0, '+639', 'continue;')
(-156, 0, 'D', 36, '595', 'if (ngx_processes[n].exited\\n                        || ngx_processes[n].pid == -1\\n                        || ngx_processes[n].channel[0] == -1)')
(-202, 0, 'D', 22, '608', 'ngx_write_channel(ngx_processes[n].channel[0],\\n                                      &ch, sizeof(ngx_channel_t), cycle->log)')
(-334, 0, 'D', 35, '668', 'ngx_processes[i].pid = -1')
(-367, -1, '-', 0, '-630', 'ch.command = NGX_CMD_OPEN_CHANNEL')
(-401, -1, '-', 0, '-637', 'live = 1')
(-372, -1, '-', 0, '-631', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-132, 0, 'D', 39, '591', 'ch.pid = ngx_processes[i].pid')
(-386, -1, '-', 0, '-633', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-20, 0, 'D', 66, '564', 'ch.fd = -1')
(-381, -1, '-', 0, '-632', 'ch.slot = ngx_process_slot')
(-88, 0, 'D', 48, '583', 'if (ngx_processes[i].exited)')
(-397, -1, '-', 0, '-635', 'ngx_pass_open_channel(cycle, &ch)')
(-103, 0, 'D', 45, '586', 'ngx_close_channel(ngx_processes[i].channel, cycle->log)')
(-15, 0, 'D', 67, '563', 'ch.command = NGX_CMD_CLOSE_CHANNEL')
(-402, -1, '-', 0, '-639', 'continue;')
(-39, 0, 'D', 61, '569', 'ngx_log_debug7(NGX_LOG_DEBUG_EVENT, cycle->log, 0,\\n                       "child: %i %P e:%d t:%d d:%d r:%d j:%d",\\n                       i,\\n                       ngx_processes[i].pid,\\n                       ngx_processes[i].exiting,\\n                       ngx_processes[i].exited,\\n                       ngx_processes[i].detached,\\n                       ngx_processes[i].respawn,\\n                       ngx_processes[i].just_spawn)')
(-112, 0, 'D', 43, '588', 'ngx_processes[i].channel[0] = -1')
(-217, 0, 'D', 18, '613', 'if (ngx_processes[i].respawn\\n                && !ngx_processes[i].exiting\\n                && !ngx_terminate\\n                && !ngx_quit)')
(-122, 0, 'D', 42, '589', 'ngx_processes[i].channel[1] = -1')
(-237, 0, 'DC', 12, '618', 'if (ngx_spawn_process(cycle, ngx_processes[i].proc,\\n                                      ngx_processes[i].data,\\n                                      ngx_processes[i].name, i)\\n                    == NGX_INVALID_PID)')
(-360, 0, 'D', 39, '676', 'return live;')
(-95, 0, 'D', 46, '585', 'if (!ngx_processes[i].detached)')
(-259, 0, 'D', 8, '623', 'ngx_log_error(NGX_LOG_ALERT, cycle->log, 0,\\n                                  "could not respawn %s",\\n                                  ngx_processes[i].name)')
(-274, 0, 'D', 9, '642', 'if (ngx_processes[i].pid == ngx_new_binary)')
(-467, -1, '-', 0, '-354', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-438, 1, '-', 0, '+352', 'ngx_pass_open_channel(cycle)')
(-462, -1, '-', 0, '-353', 'ch.slot = ngx_process_slot')
(-436, 1, '-', 0, '+341', 'ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, "start worker processes")')
(-478, -1, '-', 0, '-356', 'ngx_pass_open_channel(cycle, &ch)')
(-437, 1, '-', 0, '+347', 'for (i = 0; i < n; i++)')
(-453, -1, '-', 0, '-352', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-425, 0, 'D', 3, '349', 'ngx_spawn_process(cycle, ngx_worker_process_cycle,\\n                          (void *) (intptr_t) i, "worker process", type)')
(-442, -1, '-', 0, '-343', 'ngx_memzero(&ch, sizeof(ngx_channel_t))')
(-441, -1, '-', 0, '-341', 'ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, "start worker processes")')
(-447, -1, '-', 0, '-345', 'ch.command = NGX_CMD_OPEN_CHANNEL')
(-452, -1, '-', 0, '-347', 'for (i = 0; i < n; i++)')
(-566, 1, '-', 0, '+428', 'for (i = 0; i < ngx_last_process; i++)')
(-525, 0, 'D', 4, '441', 'ngx_processes[i].channel[0]')
(-587, 1, '-', 0, '+445', 'ngx_write_channel(ngx_processes[i].channel[0],\\n                          &ch, sizeof(ngx_channel_t), cycle->log)')
(-555, 1, '-', 0, '+426', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-567, 1, '-', 0, '+437', 'ngx_log_debug6(NGX_LOG_DEBUG_CORE, cycle->log, 0,\\n                      "pass channel s:%i pid:%P fd:%d to s:%i pid:%P fd:%d",\\n                      ch.slot, ch.pid, ch.fd,\\n                      i, ngx_processes[i].pid,\\n                      ngx_processes[i].channel[0])')
(-599, -1, '-', 0, '-417', 'ngx_pass_open_channel (ngx_cycle_t *cycle,ngx_channel_t *ch)')
(-602, -1, '-', 0, '-428', 'for (i = 0; i < ngx_last_process; i++)')
(-623, -1, '-', 0, '-445', 'ngx_write_channel(ngx_processes[i].channel[0],\\n                          ch, sizeof(ngx_channel_t), cycle->log)')
(-533, 1, '-', 0, '+417', 'ngx_pass_open_channel (ngx_cycle_t *cycle)')
(-600, -1, '-', 0, '-418', 'ngx_channel_t *ch')
(-483, 0, 'D', 19, '418', 'ngx_cycle_t *cycle')
(-494, 0, 'DCCCC', 7, '430', 'if (i == ngx_process_slot\\n            || ngx_processes[i].pid == -1\\n            || ngx_processes[i].channel[0] == -1)')
(-603, -1, '-', 0, '-437', 'ngx_log_debug6(NGX_LOG_DEBUG_CORE, cycle->log, 0,\\n                      "pass channel s:%i pid:%P fd:%d to s:%i pid:%P fd:%d",\\n                      ch->slot, ch->pid, ch->fd,\\n                      i, ngx_processes[i].pid,\\n                      ngx_processes[i].channel[0])')
(-536, 1, '-', 0, '+423', 'ch.command = NGX_CMD_OPEN_CHANNEL')
(-541, 1, '-', 0, '+424', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-550, 1, '-', 0, '+425', 'ch.slot = ngx_process_slot')
(-522, 0, 'D', 3, '440', 'ngx_processes[i].pid')
(-773, -1, '-', 0, '-400', 'if (loader == 0)')
(-733, -1, '-', 0, '-387', 'ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,\\n                      &ngx_cache_manager_ctx, "cache manager process",\\n                      respawn ? NGX_PROCESS_JUST_RESPAWN : NGX_PROCESS_RESPAWN)')
(-769, -1, '-', 0, '-398', 'ngx_pass_open_channel(cycle, &ch)')
(-753, -1, '-', 0, '-395', 'ch.slot = ngx_process_slot')
(-805, -1, '-', 0, '-413', 'ngx_pass_open_channel(cycle, &ch)')
(-718, 1, '-', 0, '+372', 'for (i = 0; i < ngx_cycle->paths.nelts; i++)')
(-676, 0, 'D', 7, '378', 'if (path[i]->loader)')
(-732, -1, '-', 0, '-383', 'if (manager == 0)')
(-758, -1, '-', 0, '-396', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-715, 1, '-', 0, '+368', 'manager = 0')
(-717, 1, '-', 0, '+371', 'path = ngx_cycle->paths.elts')
(-731, -1, '-', 0, '-372', 'for (i = 0; i < ngx_cycle->paths.nelts; i++)')
(-774, -1, '-', 0, '-404', 'ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,\\n                      &ngx_cache_loader_ctx, "cache loader process",\\n                      respawn ? NGX_PROCESS_JUST_SPAWN : NGX_PROCESS_NORESPAWN)')
(-719, 1, '-', 0, '+383', 'if (manager == 0)')
(-730, -1, '-', 0, '-371', 'path = ngx_cycle->paths.elts')
(-789, -1, '-', 0, '-410', 'ch.slot = ngx_process_slot')
(-724, 1, '-', 0, '+404', 'ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,\\n                      &ngx_cache_loader_ctx, "cache loader process",\\n                      respawn ? NGX_PROCESS_JUST_SPAWN : NGX_PROCESS_NORESPAWN)')
(-744, -1, '-', 0, '-394', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-780, -1, '-', 0, '-409', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-637, 0, 'D', 25, '362', 'ngx_uint_t respawn')
(-725, 1, '-', 0, '+408', 'ngx_pass_open_channel(cycle)')
(-794, -1, '-', 0, '-411', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-739, -1, '-', 0, '-393', 'ch.command = NGX_CMD_OPEN_CHANNEL')
(-734, -1, '-', 0, '-391', 'ngx_memzero(&ch, sizeof(ngx_channel_t))')
(-720, 1, '-', 0, '+387', 'ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,\\n                      &ngx_cache_manager_ctx, "cache manager process",\\n                      respawn ? NGX_PROCESS_JUST_RESPAWN : NGX_PROCESS_RESPAWN)')
(-728, -1, '-', 0, '-368', 'manager = 0')
(-729, -1, '-', 0, '-369', 'loader = 0')
(-721, 1, '-', 0, '+391', 'ngx_pass_open_channel(cycle)')
(-666, 0, 'D', 3, '374', 'if (path[i]->manager)')
(-775, -1, '-', 0, '-408', 'ch.command = NGX_CMD_OPEN_CHANNEL')
(-723, 1, '-', 0, '+400', 'if (loader == 0)')
(-716, 1, '-', 0, '+369', 'loader = 0')
---------------------------
(-237, -386, 'DDGngx_processes[i].proc', -1)
(-15, -381, 'DDGch.command', -1)
(-184, -381, 'DDGch.slot', -1)
(-386, -397, 'DDGch.fd', -1)
(-217, -372, 'DDGngx_processes[i].respawn', -1)
(-237, -397, 'DDGcycle', -1)
(-141, -367, 'DDGch.slot', -1)
(-132, -381, 'DDGch.pid', -1)
(-381, -141, 'DDGch.slot', -1)
(-237, -367, 'CDG', -1)
(-386, -132, 'DDGch.fd', -1)
(-334, -372, 'DDGngx_processes[i].pid', -1)
(-397, -367, 'DDG&ch', -1)
(-156, -386, 'DDGngx_processes[n].pid', -1)
(-39, -372, 'DDGngx_processes[i].respawn', -1)
(-103, -386, 'DDGngx_processes[i].channel', -1)
(-217, -386, 'DDGngx_processes[i].respawn', -1)
(-184, -386, 'DDGch.slot', -1)
(-156, -386, 'DDGngx_processes[n].exited', -1)
(-372, -367, 'DDGch.pid', -1)
(-20, -372, 'DDGch.fd', -1)
(-202, -372, 'DDGngx_processes[n].channel[0]', -1)
(-381, -132, 'DDGch.slot', -1)
(-95, -386, 'DDGngx_processes[i].detached', -1)
(-156, -372, 'DDGngx_processes[n].channel[0]', -1)
(-202, -367, 'DDG&ch', -1)
(-10, -381, 'DDG&ch', -1)
(-343, -386, 'DDGngx_processes[i].detached', -1)
(-15, -367, 'DDGch.command', -1)
(-397, -386, 'DDG&ch', -1)
(-202, -372, 'DDG&ch', -1)
(-112, -386, 'DDGngx_processes[i].channel[0]', -1)
(-372, -397, 'DDGch.pid', -1)
(-39, -386, 'DDGngx_processes[i].exited', -1)
(-10, -367, 'DDG&ch', -1)
(-386, -141, 'DDGch.fd', -1)
(-77, -386, 'DDGngx_processes[i].pid', -1)
(-184, -386, 'DDGngx_processes[n].pid', -1)
(-202, -397, 'DDG&ch', -1)
(-367, -141, 'DDGch.command', -1)
(-122, -372, 'DDGngx_processes[i].channel[1]', -1)
(-237, -401, 'CDG', -1)
(-237, -386, 'DDGngx_processes[i].data', -1)
(-39, -386, 'DDGngx_processes[i].pid', -1)
(-334, -386, 'DDGngx_processes[i].pid', -1)
(-39, -386, 'DDGngx_processes[i].just_spawn', -1)
(-15, -397, 'DDGch.command', -1)
(-156, -372, 'DDGngx_processes[n].exited', -1)
(-20, -381, 'DDGch.fd', -1)
(-372, -386, 'DDGch.pid', -1)
(-237, -372, 'DDGngx_processes[i].name', -1)
(-88, -372, 'DDGngx_processes[i].exited', -1)
(-10, -397, 'DDG&ch', -1)
(-386, -381, 'DDGch.fd', -1)
(-381, -372, 'DDGch.slot', -1)
(-274, -372, 'DDGngx_processes[i].pid', -1)
(-15, -386, 'DDGch.command', -1)
(-202, -381, 'DDG&ch', -1)
(-39, -386, 'DDGngx_processes[i].detached', -1)
(-132, -372, 'DDGch.pid', -1)
(-39, -372, 'DDGngx_processes[i].exited', -1)
(-141, -397, 'DDGch.slot', -1)
(-343, -386, 'DDGngx_processes[i].exiting', -1)
(-132, -386, 'DDGch.pid', -1)
(-397, -372, 'DDG&ch', -1)
(-397, -184, 'DDG&ch', -1)
(-184, -386, 'DDGch.pid', -1)
(-237, -372, 'CDG', -1)
(-367, -381, 'DDGch.command', -1)
(-397, -202, 'DDG&ch', -1)
(-381, -397, 'DDGch.slot', -1)
(-367, -386, 'DDGch.command', -1)
(-39, -372, 'DDGngx_processes[i].just_spawn', -1)
(-259, -372, 'DDGngx_processes[i].name', -1)
(-397, -141, 'DDG&ch', -1)
(-103, -372, 'DDGngx_processes[i].channel', -1)
(-237, -386, 'DDGngx_processes[i].name', -1)
(-217, -386, 'DDGngx_processes[i].exiting', -1)
(-259, -386, 'DDGngx_processes[i].name', -1)
(-397, -381, 'DDG&ch', -1)
(-386, -372, 'DDGch.fd', -1)
(-184, -372, 'DDGch.slot', -1)
(-397, -39, 'DDGcycle', -1)
(-397, -132, 'DDG&ch', -1)
(-343, -372, 'DDGngx_processes[i].exiting', -1)
(-184, -372, 'DDGch.pid', -1)
(-237, -372, 'DDGngx_processes[i].data', -1)
(-381, -367, 'DDGch.slot', -1)
(-381, -184, 'DDGch.slot', -1)
(-10, -372, 'DDG&ch', -1)
(-39, -386, 'DDGngx_processes[i].exiting', -1)
(-397, -237, 'DDGcycle', -1)
(-237, -386, 'CDG', -1)
(-343, -372, 'DDGngx_processes[i].detached', -1)
(-39, -386, 'DDGngx_processes[i].respawn', -1)
(-367, -372, 'DDGch.command', -1)
(-141, -372, 'DDGch.slot', -1)
(-372, -381, 'DDGch.pid', -1)
(-122, -386, 'DDGngx_processes[i].channel[1]', -1)
(-372, -132, 'DDGch.pid', -1)
(-217, -372, 'DDGngx_processes[i].exiting', -1)
(-156, -386, 'DDGngx_processes[n].channel[0]', -1)
(-184, -372, 'DDGngx_processes[n].pid', -1)
(-401, -360, 'DDGlive', -1)
(-237, -397, 'CDG', -1)
(-39, -372, 'DDGngx_processes[i].pid', -1)
(-202, -386, 'DDG&ch', -1)
(-88, -386, 'DDGngx_processes[i].exited', -1)
(-156, -372, 'DDGngx_processes[n].pid', -1)
(-184, -381, 'DDGch.pid', -1)
(-20, -367, 'DDGch.fd', -1)
(-237, -372, 'DDGngx_processes[i].proc', -1)
(-381, -386, 'DDGch.slot', -1)
(-39, -372, 'DDGngx_processes[i].exiting', -1)
(-112, -372, 'DDGngx_processes[i].channel[0]', -1)
(-367, -132, 'DDGch.command', -1)
(-10, -386, 'DDG&ch', -1)
(-77, -372, 'DDGngx_processes[i].pid', -1)
(-15, -372, 'DDGch.command', -1)
(-132, -367, 'DDGch.pid', -1)
(-39, -372, 'DDGngx_processes[i].detached', -1)
(-274, -386, 'DDGngx_processes[i].pid', -1)
(-141, -381, 'DDGch.slot', -1)
(-184, -397, 'DDGch.pid', -1)
(-20, -397, 'DDGch.fd', -1)
(-386, -367, 'DDGch.fd', -1)
(-141, -386, 'DDGch.slot', -1)
(-184, -397, 'DDGch.slot', -1)
(-367, -184, 'DDGch.command', -1)
(-367, -202, 'DDGch.command', -1)
(-386, -184, 'DDGch.fd', -1)
(-184, -367, 'DDGch.slot', -1)
(-132, -397, 'DDGch.pid', -1)
(-386, -202, 'DDGch.fd', -1)
(-184, -367, 'DDGch.pid', -1)
(-95, -372, 'DDGngx_processes[i].detached', -1)
(-20, -386, 'DDGch.fd', -1)
(-381, -202, 'DDGch.slot', -1)
(-367, -397, 'DDGch.command', -1)
(-202, -386, 'DDGngx_processes[n].channel[0]', -1)
(-237, -381, 'CDG', -1)
(-462, -453, 'DDGch.slot', -1)
(-453, -478, 'DDGch.pid', -1)
(-467, -478, 'DDGch.fd', -1)
(-462, -478, 'DDGch.slot', -1)
(-447, -462, 'DDGch.command', -1)
(-442, -453, 'DDG&ch', -1)
(-452, -462, 'CDG', -1)
(-462, -467, 'DDGch.slot', -1)
(-447, -478, 'DDGch.command', -1)
(-478, -462, 'DDG&ch', -1)
(-447, -453, 'DDGch.command', -1)
(-442, -478, 'DDG&ch', -1)
(-478, -425, 'DDGcycle', -1)
(-442, -467, 'DDG&ch', -1)
(-467, -462, 'DDGch.fd', -1)
(-452, -453, 'CDG', -1)
(-478, -453, 'DDG&ch', -1)
(-452, -478, 'CDG', -1)
(-447, -467, 'DDGch.command', -1)
(-425, -478, 'DDGcycle', -1)
(-442, -447, 'DDG&ch', -1)
(-467, -453, 'DDGch.fd', -1)
(-453, -462, 'DDGch.pid', -1)
(-442, -462, 'DDG&ch', -1)
(-452, -467, 'CDG', -1)
(-453, -467, 'DDGch.pid', -1)
(-478, -467, 'DDG&ch', -1)
(-603, -525, 'DDGngx_processes[i].pid', -1)
(-494, -603, 'DDGngx_processes[i].channel[0]', -1)
(-600, -603, 'DDGch', -1)
(-603, -623, 'DDGngx_processes[i].pid', -1)
(-603, -494, 'DDGngx_processes[i].channel[0]', -1)
(-494, -603, 'CDG', -1)
(-603, -522, 'DDGngx_processes[i].channel[0]', -1)
(-623, -494, 'DDGngx_processes[i].channel[0]', -1)
(-494, -623, 'DDGngx_processes[i].channel[0]', -1)
(-494, -603, 'DDGngx_processes[i].pid', -1)
(-623, -522, 'DDGngx_processes[i].channel[0]', -1)
(-494, -623, 'CDG', -1)
(-603, -525, 'DDGngx_processes[i].channel[0]', -1)
(-603, -494, 'DDGngx_processes[i].pid', -1)
(-603, -522, 'DDGngx_processes[i].pid', -1)
(-623, -525, 'DDGngx_processes[i].channel[0]', -1)
(-494, -623, 'DDGngx_processes[i].pid', -1)
(-623, -603, 'DDGngx_processes[i].channel[0]', -1)
(-494, -525, 'DDGngx_processes[i].pid', -1)
(-603, -623, 'DDGngx_processes[i].channel[0]', -1)
(-623, -603, 'DDGch', -1)
(-600, -623, 'DDGch', -1)
(-734, -794, 'DDG&ch', -1)
(-775, -794, 'DDGch.command', -1)
(-753, -805, 'DDGch.slot', -1)
(-758, -780, 'DDGch.fd', -1)
(-729, -773, 'DDGloader', -1)
(-780, -805, 'DDGch.pid', -1)
(-774, -805, 'DDGcycle', -1)
(-739, -775, 'DDGch.command', -1)
(-732, -744, 'CDG', -1)
(-775, -780, 'DDGch.command', -1)
(-773, -774, 'CDG', -1)
(-773, -789, 'CDG', -1)
(-734, -780, 'DDG&ch', -1)
(-734, -744, 'DDG&ch', -1)
(-758, -805, 'DDGch.fd', -1)
(-730, -676, 'DDGpath', -1)
(-769, -774, 'DDGcycle', -1)
(-637, -733, 'DDGrespawn', -1)
(-739, -794, 'DDGch.command', -1)
(-753, -794, 'DDGch.slot', -1)
(-734, -769, 'DDG&ch', -1)
(-739, -744, 'DDGch.command', -1)
(-739, -753, 'DDGch.command', -1)
(-733, -769, 'DDGcycle', -1)
(-769, -775, 'DDG&ch', -1)
(-732, -769, 'CDG', -1)
(-733, -774, 'DDGngx_cache_manager_process_cycle', -1)
(-794, -805, 'DDGch.fd', -1)
(-734, -789, 'DDG&ch', -1)
(-789, -805, 'DDGch.slot', -1)
(-758, -775, 'DDGch.fd', -1)
(-734, -758, 'DDG&ch', -1)
(-769, -789, 'DDG&ch', -1)
(-732, -739, 'CDG', -1)
(-769, -805, 'DDG&ch', -1)
(-773, -805, 'CDG', -1)
(-744, -805, 'DDGch.pid', -1)
(-732, -758, 'CDG', -1)
(-758, -769, 'DDGch.fd', -1)
(-780, -789, 'DDGch.pid', -1)
(-753, -769, 'DDGch.slot', -1)
(-775, -805, 'DDGch.command', -1)
(-734, -775, 'DDG&ch', -1)
(-780, -794, 'DDGch.pid', -1)
(-753, -780, 'DDGch.slot', -1)
(-744, -794, 'DDGch.pid', -1)
(-744, -758, 'DDGch.pid', -1)
(-753, -789, 'DDGch.slot', -1)
(-775, -789, 'DDGch.command', -1)
(-734, -753, 'DDG&ch', -1)
(-773, -775, 'CDG', -1)
(-739, -780, 'DDGch.command', -1)
(-734, -805, 'DDG&ch', -1)
(-744, -775, 'DDGch.pid', -1)
(-773, -780, 'CDG', -1)
(-744, -780, 'DDGch.pid', -1)
(-732, -733, 'CDG', -1)
(-732, -734, 'CDG', -1)
(-769, -794, 'DDG&ch', -1)
(-739, -769, 'DDGch.command', -1)
(-753, -758, 'DDGch.slot', -1)
(-773, -794, 'CDG', -1)
(-744, -769, 'DDGch.pid', -1)
(-789, -794, 'DDGch.slot', -1)
(-734, -739, 'DDG&ch', -1)
(-732, -753, 'CDG', -1)
(-739, -789, 'DDGch.command', -1)
(-739, -805, 'DDGch.command', -1)
(-753, -775, 'DDGch.slot', -1)
(-744, -789, 'DDGch.pid', -1)
(-758, -789, 'DDGch.fd', -1)
(-730, -666, 'DDGpath', -1)
(-728, -732, 'DDGmanager', -1)
(-758, -794, 'DDGch.fd', -1)
(-744, -753, 'DDGch.pid', -1)
(-739, -758, 'DDGch.command', -1)
(-769, -780, 'DDG&ch', -1)
===========================
(-141, 0, 'D', 38, '592', 'ch.slot = i')
(-343, 0, 'D', 38, '671', 'if (ngx_processes[i].exiting || !ngx_processes[i].detached)')
(-10, 0, 'D', 69, '561', 'ngx_memzero(&ch, sizeof(ngx_channel_t))')
(-184, 0, 'D', 28, '602', 'ngx_log_debug3(NGX_LOG_DEBUG_CORE, cycle->log, 0,\\n                                   "pass close channel s:%i pid:%P to:%P",\\n                                   ch.slot, ch.pid, ngx_processes[n].pid)')
(-77, 0, 'D', 52, '579', 'if (ngx_processes[i].pid == -1)')
(-156, 0, 'D', 36, '595', 'if (ngx_processes[n].exited\\n                        || ngx_processes[n].pid == -1\\n                        || ngx_processes[n].channel[0] == -1)')
(-202, 0, 'D', 22, '608', 'ngx_write_channel(ngx_processes[n].channel[0],\\n                                      &ch, sizeof(ngx_channel_t), cycle->log)')
(-334, 0, 'D', 35, '668', 'ngx_processes[i].pid = -1')
(-367, -1, '-', 0, '-630', 'ch.command = NGX_CMD_OPEN_CHANNEL')
(-401, -1, '-', 0, '-637', 'live = 1')
(-372, -1, '-', 0, '-631', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-132, 0, 'D', 39, '591', 'ch.pid = ngx_processes[i].pid')
(-386, -1, '-', 0, '-633', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-20, 0, 'D', 66, '564', 'ch.fd = -1')
(-381, -1, '-', 0, '-632', 'ch.slot = ngx_process_slot')
(-88, 0, 'D', 48, '583', 'if (ngx_processes[i].exited)')
(-397, -1, '-', 0, '-635', 'ngx_pass_open_channel(cycle, &ch)')
(-103, 0, 'D', 45, '586', 'ngx_close_channel(ngx_processes[i].channel, cycle->log)')
(-15, 0, 'D', 67, '563', 'ch.command = NGX_CMD_CLOSE_CHANNEL')
(-402, -1, '-', 0, '-639', 'continue;')
(-39, 0, 'D', 61, '569', 'ngx_log_debug7(NGX_LOG_DEBUG_EVENT, cycle->log, 0,\\n                       "child: %i %P e:%d t:%d d:%d r:%d j:%d",\\n                       i,\\n                       ngx_processes[i].pid,\\n                       ngx_processes[i].exiting,\\n                       ngx_processes[i].exited,\\n                       ngx_processes[i].detached,\\n                       ngx_processes[i].respawn,\\n                       ngx_processes[i].just_spawn)')
(-112, 0, 'D', 43, '588', 'ngx_processes[i].channel[0] = -1')
(-217, 0, 'D', 18, '613', 'if (ngx_processes[i].respawn\\n                && !ngx_processes[i].exiting\\n                && !ngx_terminate\\n                && !ngx_quit)')
(-122, 0, 'D', 42, '589', 'ngx_processes[i].channel[1] = -1')
(-237, 0, 'DC', 12, '618', 'if (ngx_spawn_process(cycle, ngx_processes[i].proc,\\n                                      ngx_processes[i].data,\\n                                      ngx_processes[i].name, i)\\n                    == NGX_INVALID_PID)')
(-360, 0, 'D', 39, '676', 'return live;')
(-95, 0, 'D', 46, '585', 'if (!ngx_processes[i].detached)')
(-259, 0, 'D', 8, '623', 'ngx_log_error(NGX_LOG_ALERT, cycle->log, 0,\\n                                  "could not respawn %s",\\n                                  ngx_processes[i].name)')
(-274, 0, 'D', 9, '642', 'if (ngx_processes[i].pid == ngx_new_binary)')
(-467, -1, '-', 0, '-354', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-462, -1, '-', 0, '-353', 'ch.slot = ngx_process_slot')
(-478, -1, '-', 0, '-356', 'ngx_pass_open_channel(cycle, &ch)')
(-453, -1, '-', 0, '-352', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-425, 0, 'D', 3, '349', 'ngx_spawn_process(cycle, ngx_worker_process_cycle,\\n                          (void *) (intptr_t) i, "worker process", type)')
(-442, -1, '-', 0, '-343', 'ngx_memzero(&ch, sizeof(ngx_channel_t))')
(-441, -1, '-', 0, '-341', 'ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, "start worker processes")')
(-447, -1, '-', 0, '-345', 'ch.command = NGX_CMD_OPEN_CHANNEL')
(-452, -1, '-', 0, '-347', 'for (i = 0; i < n; i++)')
(-525, 0, 'D', 4, '441', 'ngx_processes[i].channel[0]')
(-599, -1, '-', 0, '-417', 'ngx_pass_open_channel (ngx_cycle_t *cycle,ngx_channel_t *ch)')
(-602, -1, '-', 0, '-428', 'for (i = 0; i < ngx_last_process; i++)')
(-623, -1, '-', 0, '-445', 'ngx_write_channel(ngx_processes[i].channel[0],\\n                          ch, sizeof(ngx_channel_t), cycle->log)')
(-600, -1, '-', 0, '-418', 'ngx_channel_t *ch')
(-483, 0, 'D', 19, '418', 'ngx_cycle_t *cycle')
(-494, 0, 'DCCCC', 7, '430', 'if (i == ngx_process_slot\\n            || ngx_processes[i].pid == -1\\n            || ngx_processes[i].channel[0] == -1)')
(-603, -1, '-', 0, '-437', 'ngx_log_debug6(NGX_LOG_DEBUG_CORE, cycle->log, 0,\\n                      "pass channel s:%i pid:%P fd:%d to s:%i pid:%P fd:%d",\\n                      ch->slot, ch->pid, ch->fd,\\n                      i, ngx_processes[i].pid,\\n                      ngx_processes[i].channel[0])')
(-522, 0, 'D', 3, '440', 'ngx_processes[i].pid')
(-773, -1, '-', 0, '-400', 'if (loader == 0)')
(-733, -1, '-', 0, '-387', 'ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,\\n                      &ngx_cache_manager_ctx, "cache manager process",\\n                      respawn ? NGX_PROCESS_JUST_RESPAWN : NGX_PROCESS_RESPAWN)')
(-769, -1, '-', 0, '-398', 'ngx_pass_open_channel(cycle, &ch)')
(-753, -1, '-', 0, '-395', 'ch.slot = ngx_process_slot')
(-805, -1, '-', 0, '-413', 'ngx_pass_open_channel(cycle, &ch)')
(-676, 0, 'D', 7, '378', 'if (path[i]->loader)')
(-732, -1, '-', 0, '-383', 'if (manager == 0)')
(-758, -1, '-', 0, '-396', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-731, -1, '-', 0, '-372', 'for (i = 0; i < ngx_cycle->paths.nelts; i++)')
(-774, -1, '-', 0, '-404', 'ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,\\n                      &ngx_cache_loader_ctx, "cache loader process",\\n                      respawn ? NGX_PROCESS_JUST_SPAWN : NGX_PROCESS_NORESPAWN)')
(-730, -1, '-', 0, '-371', 'path = ngx_cycle->paths.elts')
(-789, -1, '-', 0, '-410', 'ch.slot = ngx_process_slot')
(-744, -1, '-', 0, '-394', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-780, -1, '-', 0, '-409', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-637, 0, 'D', 25, '362', 'ngx_uint_t respawn')
(-794, -1, '-', 0, '-411', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-739, -1, '-', 0, '-393', 'ch.command = NGX_CMD_OPEN_CHANNEL')
(-734, -1, '-', 0, '-391', 'ngx_memzero(&ch, sizeof(ngx_channel_t))')
(-728, -1, '-', 0, '-368', 'manager = 0')
(-729, -1, '-', 0, '-369', 'loader = 0')
(-666, 0, 'D', 3, '374', 'if (path[i]->manager)')
(-775, -1, '-', 0, '-408', 'ch.command = NGX_CMD_OPEN_CHANNEL')
---------------------------
(-237, -363, 'CDG', 1)
(-237, -363, 'DDGcycle', 1)
(-365, -360, 'DDGlive', 1)
(-363, -39, 'DDGcycle', 1)
(-237, -365, 'CDG', 1)
(-363, -237, 'DDGcycle', 1)
(-425, -438, 'DDGcycle', 1)
(-438, -425, 'DDGcycle', 1)
(-437, -438, 'CDG', 1)
(-567, -494, 'DDGngx_processes[i].channel[0]', 1)
(-587, -567, 'DDGngx_processes[i].channel[0]', 1)
(-567, -587, 'DDGch.pid', 1)
(-494, -587, 'DDGngx_processes[i].pid', 1)
(-541, -587, 'DDGch.pid', 1)
(-536, -541, 'DDGch.command', 1)
(-555, -587, 'DDGch.fd', 1)
(-494, -567, 'CDG', 1)
(-567, -587, 'DDGngx_processes[i].pid', 1)
(-567, -587, 'DDGch.fd', 1)
(-567, -525, 'DDGngx_processes[i].pid', 1)
(-536, -567, 'DDGch.command', 1)
(-536, -555, 'DDGch.command', 1)
(-541, -550, 'DDGch.pid', 1)
(-494, -567, 'DDGngx_processes[i].pid', 1)
(-567, -522, 'DDGngx_processes[i].channel[0]', 1)
(-541, -555, 'DDGch.pid', 1)
(-587, -525, 'DDGngx_processes[i].channel[0]', 1)
(-567, -494, 'DDGngx_processes[i].pid', 1)
(-587, -522, 'DDGngx_processes[i].channel[0]', 1)
(-550, -555, 'DDGch.slot', 1)
(-567, -587, 'DDGngx_processes[i].channel[0]', 1)
(-587, -567, 'DDG&ch', 1)
(-555, -567, 'DDGch.fd', 1)
(-550, -567, 'DDGch.slot', 1)
(-536, -587, 'DDGch.command', 1)
(-587, -494, 'DDGngx_processes[i].channel[0]', 1)
(-483, -567, 'DDGcycle', 1)
(-494, -587, 'DDGngx_processes[i].channel[0]', 1)
(-541, -567, 'DDGch.pid', 1)
(-494, -567, 'DDGngx_processes[i].channel[0]', 1)
(-567, -525, 'DDGngx_processes[i].channel[0]', 1)
(-567, -522, 'DDGngx_processes[i].pid', 1)
(-536, -550, 'DDGch.command', 1)
(-567, -587, 'DDGch.slot', 1)
(-494, -587, 'CDG', 1)
(-637, -720, 'DDGrespawn', 1)
(-723, -725, 'CDG', 1)
(-715, -719, 'DDGmanager', 1)
(-721, -724, 'DDGcycle', 1)
(-720, -724, 'DDGngx_cache_manager_process_cycle', 1)
(-719, -721, 'CDG', 1)
(-720, -721, 'DDGcycle', 1)
(-723, -724, 'CDG', 1)
(-724, -725, 'DDGcycle', 1)
(-716, -723, 'DDGloader', 1)
(-719, -720, 'CDG', 1)
(-717, -666, 'DDGpath', 1)
===========================
(-141, 0, 'D', 38, '592', 'ch.slot = i')
(-343, 0, 'D', 38, '671', 'if (ngx_processes[i].exiting || !ngx_processes[i].detached)')
(-365, 1, '-', 0, '+637', 'live = 1')
(-10, 0, 'D', 69, '561', 'ngx_memzero(&ch, sizeof(ngx_channel_t))')
(-363, 1, '-', 0, '+630', 'ngx_pass_open_channel(cycle)')
(-184, 0, 'D', 28, '602', 'ngx_log_debug3(NGX_LOG_DEBUG_CORE, cycle->log, 0,\\n                                   "pass close channel s:%i pid:%P to:%P",\\n                                   ch.slot, ch.pid, ngx_processes[n].pid)')
(-77, 0, 'D', 52, '579', 'if (ngx_processes[i].pid == -1)')
(-366, 1, '-', 0, '+639', 'continue;')
(-156, 0, 'D', 36, '595', 'if (ngx_processes[n].exited\\n                        || ngx_processes[n].pid == -1\\n                        || ngx_processes[n].channel[0] == -1)')
(-202, 0, 'D', 22, '608', 'ngx_write_channel(ngx_processes[n].channel[0],\\n                                      &ch, sizeof(ngx_channel_t), cycle->log)')
(-334, 0, 'D', 35, '668', 'ngx_processes[i].pid = -1')
(-132, 0, 'D', 39, '591', 'ch.pid = ngx_processes[i].pid')
(-20, 0, 'D', 66, '564', 'ch.fd = -1')
(-88, 0, 'D', 48, '583', 'if (ngx_processes[i].exited)')
(-103, 0, 'D', 45, '586', 'ngx_close_channel(ngx_processes[i].channel, cycle->log)')
(-15, 0, 'D', 67, '563', 'ch.command = NGX_CMD_CLOSE_CHANNEL')
(-39, 0, 'D', 61, '569', 'ngx_log_debug7(NGX_LOG_DEBUG_EVENT, cycle->log, 0,\\n                       "child: %i %P e:%d t:%d d:%d r:%d j:%d",\\n                       i,\\n                       ngx_processes[i].pid,\\n                       ngx_processes[i].exiting,\\n                       ngx_processes[i].exited,\\n                       ngx_processes[i].detached,\\n                       ngx_processes[i].respawn,\\n                       ngx_processes[i].just_spawn)')
(-112, 0, 'D', 43, '588', 'ngx_processes[i].channel[0] = -1')
(-217, 0, 'D', 18, '613', 'if (ngx_processes[i].respawn\\n                && !ngx_processes[i].exiting\\n                && !ngx_terminate\\n                && !ngx_quit)')
(-122, 0, 'D', 42, '589', 'ngx_processes[i].channel[1] = -1')
(-237, 0, 'DC', 12, '618', 'if (ngx_spawn_process(cycle, ngx_processes[i].proc,\\n                                      ngx_processes[i].data,\\n                                      ngx_processes[i].name, i)\\n                    == NGX_INVALID_PID)')
(-360, 0, 'D', 39, '676', 'return live;')
(-95, 0, 'D', 46, '585', 'if (!ngx_processes[i].detached)')
(-259, 0, 'D', 8, '623', 'ngx_log_error(NGX_LOG_ALERT, cycle->log, 0,\\n                                  "could not respawn %s",\\n                                  ngx_processes[i].name)')
(-274, 0, 'D', 9, '642', 'if (ngx_processes[i].pid == ngx_new_binary)')
(-438, 1, '-', 0, '+352', 'ngx_pass_open_channel(cycle)')
(-436, 1, '-', 0, '+341', 'ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, "start worker processes")')
(-437, 1, '-', 0, '+347', 'for (i = 0; i < n; i++)')
(-425, 0, 'D', 3, '349', 'ngx_spawn_process(cycle, ngx_worker_process_cycle,\\n                          (void *) (intptr_t) i, "worker process", type)')
(-566, 1, '-', 0, '+428', 'for (i = 0; i < ngx_last_process; i++)')
(-525, 0, 'D', 4, '441', 'ngx_processes[i].channel[0]')
(-587, 1, '-', 0, '+445', 'ngx_write_channel(ngx_processes[i].channel[0],\\n                          &ch, sizeof(ngx_channel_t), cycle->log)')
(-555, 1, '-', 0, '+426', 'ch.fd = ngx_processes[ngx_process_slot].channel[0]')
(-567, 1, '-', 0, '+437', 'ngx_log_debug6(NGX_LOG_DEBUG_CORE, cycle->log, 0,\\n                      "pass channel s:%i pid:%P fd:%d to s:%i pid:%P fd:%d",\\n                      ch.slot, ch.pid, ch.fd,\\n                      i, ngx_processes[i].pid,\\n                      ngx_processes[i].channel[0])')
(-533, 1, '-', 0, '+417', 'ngx_pass_open_channel (ngx_cycle_t *cycle)')
(-483, 0, 'D', 19, '418', 'ngx_cycle_t *cycle')
(-494, 0, 'DCCCC', 7, '430', 'if (i == ngx_process_slot\\n            || ngx_processes[i].pid == -1\\n            || ngx_processes[i].channel[0] == -1)')
(-536, 1, '-', 0, '+423', 'ch.command = NGX_CMD_OPEN_CHANNEL')
(-541, 1, '-', 0, '+424', 'ch.pid = ngx_processes[ngx_process_slot].pid')
(-550, 1, '-', 0, '+425', 'ch.slot = ngx_process_slot')
(-522, 0, 'D', 3, '440', 'ngx_processes[i].pid')
(-718, 1, '-', 0, '+372', 'for (i = 0; i < ngx_cycle->paths.nelts; i++)')
(-676, 0, 'D', 7, '378', 'if (path[i]->loader)')
(-715, 1, '-', 0, '+368', 'manager = 0')
(-717, 1, '-', 0, '+371', 'path = ngx_cycle->paths.elts')
(-719, 1, '-', 0, '+383', 'if (manager == 0)')
(-724, 1, '-', 0, '+404', 'ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,\\n                      &ngx_cache_loader_ctx, "cache loader process",\\n                      respawn ? NGX_PROCESS_JUST_SPAWN : NGX_PROCESS_NORESPAWN)')
(-637, 0, 'D', 25, '362', 'ngx_uint_t respawn')
(-725, 1, '-', 0, '+408', 'ngx_pass_open_channel(cycle)')
(-720, 1, '-', 0, '+387', 'ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,\\n                      &ngx_cache_manager_ctx, "cache manager process",\\n                      respawn ? NGX_PROCESS_JUST_RESPAWN : NGX_PROCESS_RESPAWN)')
(-721, 1, '-', 0, '+391', 'ngx_pass_open_channel(cycle)')
(-666, 0, 'D', 3, '374', 'if (path[i]->manager)')
(-723, 1, '-', 0, '+400', 'if (loader == 0)')
(-716, 1, '-', 0, '+369', 'loader = 0')
